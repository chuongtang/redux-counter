{"version":3,"sources":["components/counterSlide.js","components/Counter.jsx","components/StoreData.js","components/CreateStore.jsx","components/Navbar.jsx","components/Home.jsx","components/loading.svg","components/LoadingPage.jsx","App.js","app/store.js","index.js"],"names":["Slice","createSlice","name","initialState","value","storename","reducers","increment","state","decrement","incrementByAmount","action","payload","selectCount","counter","actions","Counter","count","useSelector","dispatch","useDispatch","useState","setValue","storeName","setStoreName","retCountByName","strName","a","console","log","findUrl","axios","get","params","then","response","strCount","data","alert","catch","error","saveCountToDB","put","className","type","placeholder","onChange","e","target","handleStoreName","onClick","num","parseInt","handleChange","StoreData","stores","setStores","history","useHistory","useEffect","fetch","reponse","json","predata","reverse","message","getStore","handleDelete","delUrl","delete","id","push","go","style","map","store","_id","CreateStore","input","setInput","prevInput","handleClick","preventDefault","newStore","post","resFromSer","setInterval","autoComplete","Navbar","to","hidden","Home","options","max","height","width","LoadingPageCom","color","marginLeft","src","LoadingPage","alt","App","path","exact","Store","configureStore","reducer","counterReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32a3ffbb.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// populate the core of our Redux logic in Slice\r\n// createSlice is a function that accepts an initial state, an object full of reducer functions, and a \"slice name\", and automatically generates action creators and action types that correspond to the reducers and state.\r\n\r\nconst initialState = { value: 0, storename: 'NameOfStore' }\r\n\r\nconst Slice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n    //  Reducer is acting as an \"event listener\" that handles events based on received action type while Dispatching actions is \"triggering events\"\r\n  reducers: {\r\n    increment(state) {\r\n      state.value++\r\n    },\r\n    decrement(state) {\r\n      state.value--\r\n    },\r\n    incrementByAmount(state, action) {\r\n      state.value += action.payload\r\n    }\r\n  },\r\n})\r\n\r\nexport  const selectCount = (state) => state.counter.value;\r\nexport const { increment, decrement, incrementByAmount } = Slice.actions\r\nexport default Slice.reducer","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    increment,\r\n    decrement,\r\n    incrementByAmount,\r\n    selectCount,\r\n} from \"./counterSlide.js\";\r\nimport axios from 'axios';\r\n\r\nconst Counter = () => {\r\n    let count = useSelector(selectCount);\r\n    const dispatch = useDispatch();\r\n    const [value, setValue] = useState(1);\r\n    const [storeName, setStoreName] = useState('⮮');\r\n\r\n    const handleChange = (e) => {\r\n        const num = parseInt(e.target.value);\r\n        setValue(num);\r\n    };\r\n    const handleStoreName = (e) => {\r\n        setStoreName(e.target.value);\r\n    };\r\n    const retCountByName = async (strName) => {\r\n        console.log(strName);\r\n        const findUrl = '/stores/' + strName;\r\n        await axios.get(findUrl, {\r\n            params: {\r\n                storeName: strName\r\n            }\r\n        })\r\n            .then(function (response) {\r\n                console.log(response);\r\n                const strCount = response.data.count\r\n                console.log(strCount);\r\n                if (!strCount) {\r\n                    alert('😢 Store not found.\\nStore Name is CaSe sEnSiTive 🔍.\\nPlease try again');\r\n                } else {\r\n                    setValue(strCount);\r\n                    alert(`${strName}'s previous count retrived 👍.\\nClick the \"CHANGE by ⏩\" button to continue counting`);\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    };\r\n    const saveCountToDB = async ()=>{\r\n        await axios.put('/stores', { storeName, count })\r\n        .then(function (response) {\r\n            console.log(response);\r\n            alert(`New count updated for ${storeName}`)\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n    }\r\n    return (\r\n        <div className='container App' >\r\n            <h1 className='appName'>{storeName} </h1>\r\n            <div className='nameBox'>\r\n                <input type='text' placeholder='Enter store name' className='inputName' onChange={(e) => handleStoreName(e)} />\r\n                <br></br><button className=\"flatBtn\" onClick={() => retCountByName(storeName)}>\r\n                    Click to retrieve previous count\r\n                </button>\r\n            </div>\r\n            <h2 className=\"count\">Count: {count}</h2>\r\n            <button className=\"flatBtn\" onClick={() => saveCountToDB()}>\r\n                click to save count to database\r\n                </button><br></br>\r\n            <button className='counterBtn' onClick={() => dispatch(increment())}>➕</button>\r\n            <button className='counterBtn' onClick={() => dispatch(decrement())}>➖</button>\r\n            <div className='box-btn' >\r\n                <button className=\"btn-plus btn\" onClick={() => dispatch(incrementByAmount(value))}>\r\n                    🎢CHANGE by ⏩\r\n                </button>\r\n                <input placeholder={value} className='inputBox' onChange={(e) => handleChange(e)} />\r\n                <p>(enter negative number for subtraction)</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\n\r\nfunction StoreData() {\r\n    const [stores, setStores] = useState([{\r\n        storeName: '',\r\n        count: ''\r\n    }])\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const getStore = async () => {\r\n            try {\r\n                const reponse = await fetch(\"/stores\");\r\n                const predata = await reponse.json();\r\n                const data = predata.reverse();\r\n                console.log(data);\r\n                setStores(data);\r\n                // const revStore = stores.reverse();\r\n                // return revStore;\r\n            } catch (error) {\r\n                console.log(error.message);\r\n            }\r\n        }\r\n        getStore();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    const handleDelete = async (strName) => {\r\n        // e.preventDefault();\r\n        const delUrl = \"/stores/\" + strName;\r\n        console.log(delUrl);\r\n        await axios.delete(delUrl, { params: { id: strName } })\r\n            .then(response => {\r\n                console.log(response);\r\n                history.push('/loading');\r\n                history.go(-1);\r\n            })\r\n    }\r\n    return (\r\n        <div className=\"ApiData\" key='ApiData'>\r\n            <hr></hr>\r\n            <h2>⮋  Data from MongoDB Atlas  ⮋</h2>\r\n            {\r\n                <table style={{ 'fontSize': '18px' }}>\r\n                    <thead className=\"datatable\" style={{ 'fontSize': '22px' }}>\r\n                        <tr key='head'>\r\n                            <th>Store</th><th>Count</th>\r\n                        </tr>\r\n\r\n                    </thead>\r\n                    <tbody className=\"datatable\" >\r\n                        {stores.map((store) => {\r\n                            return (\r\n                                <tr key={store.id}>\r\n                                    <td className=\"datatable\" >{store.storeName}</td>\r\n                                    <td className=\"datatable\">{store.count}</td>\r\n                                    <td className=\"delTab\" onClick={() => { handleDelete(store._id) }}>🗑️</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StoreData;","import React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport StoreData from './StoreData'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction CreateStore () {\r\n    const history = useHistory();\r\n    const [input, setInput] = useState({\r\n        storeName: '',\r\n        count: ''\r\n    })\r\n    function handleChange(e){\r\n        const {name, value}= e.target;\r\n        setInput(prevInput => {\r\n            return {\r\n                ...prevInput,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n     const handleClick = async(e)=>{\r\n        e.preventDefault();\r\n        const newStore ={\r\n            storeName: input.storeName,\r\n            count: input.count  \r\n        }\r\n        console.log(newStore);\r\n        await axios.post('/stores', newStore)\r\n        .then(response => {\r\n            const resFromSer = response.data.message;\r\n            console.log(resFromSer);\r\n            if(!resFromSer){\r\n                alert(`${newStore.storeName} with ${newStore.count}Counts has been added to database 🚀. \\nGo to \"Counter\" to retrieve count number and start counting`);\r\n            } else {\r\n                console.log('Response from server: ', resFromSer);\r\n                alert (resFromSer);\r\n                return resFromSer;\r\n\r\n            }\r\n            history.push('/loading');\r\n            setInterval(history.push('/create'), 5000);\r\n        })\r\n        .catch(error => {\r\n            console.error('There was an error!', error);\r\n        // \r\n        })\r\n     };\r\n\r\n    return <div className=\"App\">\r\n        <h1>Create Store data</h1>\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <input onChange={handleChange} name='storeName' value={input.storeName} autoComplete='off' className='inputName' placeholder='Enter Store Name'/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input onChange={handleChange} name='count' value={input.count} autoComplete='off' className='inputName' placeholder='Counter start at'/>\r\n            </div>\r\n            <button type=\"submit\" onClick={handleClick} className=\"btn btn-primary\">Send to Database 🚀</button>\r\n        </form>\r\n        <StoreData />\r\n    </div>\r\n}\r\n\r\nexport default CreateStore;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Navbar (){\r\n    return <nav className=\"navBarHd\"> \r\n        <h4><Link className='link' to='/'>HOME</Link></h4>\r\n        <h4><Link className='link' to='/create'>Create Store </Link></h4>\r\n        <h4><Link className='link' to='/counter'>Counter</Link></h4>\r\n        <h4 hidden><Link className='link' to='/loading'>DB Connetion</Link></h4>\r\n    </nav>\r\n\r\n}\r\nexport default Navbar","import React from 'react';\r\nimport Tilt from 'react-tilt'\r\n\r\n\r\nconst Home = () => {\r\n    return (\r\n        <Tilt className=\"Tilt\" options={{ max: 15 }} style={{ height: 250, width: 1215, }} >\r\n            <div className=\"App\" id='homepg'>\r\n                <h2 style={{ 'textalign': 'center' }}>Project Detail 📚(what I have learned in building this)</h2>\r\n                <h3>🏡Home Page</h3>\r\n                <ul>\r\n                    <li>Home page use React-router to render different components.</li>\r\n                    <li>Pure CSS styling is in index.css.</li>\r\n                    <li>React-Tilt for the tilting animation</li>\r\n                    <li>Now, try hover your cursor over this component 🌩️</li>\r\n                </ul>\r\n                <h3>🏪 Create Store</h3>\r\n                <ul>\r\n                    <li>Create Store will connect/post a newStore to MongoDB.</li>\r\n                    <li>When submit is clicked, axios will send request to database and add new store or retrieve the previous count if store exist</li>\r\n                </ul>\r\n                <h3>🎰 Counter</h3>\r\n                <ul>\r\n                    <li>Counter is the main component with full functionality of a click counter.</li>\r\n                    <li> I use Redux Toolkit for state management. The reducer with call the dispatch action base on the onclick components.</li>\r\n                    <li>Axios was used to make HTTP requests from the browser and handle the transformation of request and response data</li>\r\n                    <li>Cool button 🎞 animation used pure CSS in index.css</li>\r\n                </ul>\r\n            </div>\r\n        </Tilt>\r\n    );\r\n}\r\n\r\nexport default Home;","export default __webpack_public_path__ + \"static/media/loading.05fa5670.svg\";","import LoadingPage from './loading.svg'\r\nconst LoadingPageCom = () => {\r\n    return ( \r\n        <div style={{color: 'white', marginLeft:'42%'}}>\r\n            <h2>Connecting to MongoDB </h2>\r\n            <h2>  Atlas database.  .  .</h2>\r\n            <img src={LoadingPage} alt=\"loading animation\" />\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default LoadingPageCom;","import Counter from './components/Counter';\r\nimport CreateStore from './components/CreateStore';\r\nimport Navbar from './components/Navbar';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport LoadingPageCom from './components/LoadingPage';\r\n\r\nfunction App() {\r\n  return (\r\n    // <div >\r\n      <Router>\r\n        <Navbar />\r\n        <Route  key='home' path='/' exact>\r\n          <Home />\r\n        </Route>\r\n        <Route  key='create' path='/create'>\r\n          <CreateStore />\r\n        </Route>\r\n        <Route  key='counter' path='/counter'>\r\n          <Counter />\r\n        </Route>\r\n        <Route  key='loading' path='/loading'>\r\n          <LoadingPageCom />\r\n        </Route>\r\n      </Router>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default App;","// using configureStore from Redux toolkit which is a function that requires passing a reducer\r\n\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport counterReducer from \"../components/counterSlide\";\r\n\r\nexport const Store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer\r\n  }\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from \"react-redux\";\r\nimport App from './App';\r\nimport { Store } from \"./app/store\";\r\n\r\n\r\n// using Provider to provide our Redux store to all wrapped Components\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <Provider store={Store}>\r\n      <App />\r\n    </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}