{"ast":null,"code":"var _jsxFileName = \"C:\\\\DATA\\\\redux-counter\\\\frontEnd\\\\src\\\\features\\\\FetchStore.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // custom hook useFetch to fetch the data from the API.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    setData(json);\n    setLoading(false);\n  } // Because useEffect hook runs on every time when a component is updated but I only need to fetch the data when a component initially Mounts to the dom, to stop this behavior in useEffect I passed the second argument an empty array []\n\n\n  useEffect(() => {\n    fetchData();\n    console.log(data);\n  }, []);\n  return {\n    loading,\n    data\n  };\n};\n\n_s(useFetch, \"Zn4cs3026OJRBhxLd0Oqj+bUOXY=\");\n\nconst FetchStore = () => {\n  _s2();\n\n  const {\n    loading,\n    data\n  } = useFetch(\"http://localhost:5001/stores\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" Loading.........\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: data.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: data.storename\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s2(FetchStore, \"Pro6cV7O43xUkwgToAZmM/3oD/8=\", false, function () {\n  return [useFetch];\n});\n\n_c = FetchStore;\nexport default FetchStore;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchStore\");","map":{"version":3,"sources":["C:/DATA/redux-counter/frontEnd/src/features/FetchStore.js"],"names":["React","useState","useEffect","useFetch","url","data","setData","loading","setLoading","fetchData","response","fetch","json","console","log","FetchStore","id","storename"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAGA;;;;;AACA,MAAMC,QAAQ,GAAGC,GAAG,IAAI;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;;AAEA,iBAAeQ,SAAf,GAA2B;AACvB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,CAA5B;AACA,UAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACAN,IAAAA,OAAO,CAACM,IAAD,CAAP;AACAJ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GATmB,CAUpB;;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,SAAS;AACTI,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACH,GAHQ,EAGP,EAHO,CAAT;AAKA,SAAO;AAAEE,IAAAA,OAAF;AAAWF,IAAAA;AAAX,GAAP;AACH,CAjBD;;GAAMF,Q;;AAmBN,MAAMY,UAAU,GAAG,MAAK;AAAA;;AAEpB,QAAM;AAAER,IAAAA,OAAF;AAAWF,IAAAA;AAAX,MAAoBF,QAAQ,CAAC,8BAAD,CAAlC;AAEA,sBACI;AAAA,cACKI,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBACJ;AAAA,8BACI;AAAA,kBAAKF,IAAI,CAACW;AAAV;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKX,IAAI,CAACY;AAAV;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR,mBADJ;AAUH,CAdD;;IAAMF,U;UAEwBZ,Q;;;KAFxBY,U;AAgBN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n\r\n// custom hook useFetch to fetch the data from the API.\r\nconst useFetch = url => {\r\n    const [data, setData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    async function fetchData() {\r\n        const response = await fetch(url);\r\n        const json = await response.json();\r\n        setData(json);\r\n        setLoading(false)\r\n    }\r\n    // Because useEffect hook runs on every time when a component is updated but I only need to fetch the data when a component initially Mounts to the dom, to stop this behavior in useEffect I passed the second argument an empty array []\r\n    useEffect(() => {\r\n        fetchData()\r\n        console.log(data);\r\n    },[]);\r\n\r\n    return { loading, data };\r\n};\r\n\r\nconst FetchStore = ()=> {\r\n\r\n    const { loading, data } = useFetch(\"http://localhost:5001/stores\");\r\n\r\n    return (\r\n        <>\r\n            {loading ? <div> Loading.........</div> :\r\n                <ul>\r\n                    <li>{data.id}</li>\r\n                    <li>{data.storename}</li>\r\n                </ul>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FetchStore;"]},"metadata":{},"sourceType":"module"}