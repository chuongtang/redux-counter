{"ast":null,"code":"var _jsxFileName = \"C:\\\\DATA\\\\redux-counter\\\\frontEnd\\\\src\\\\features\\\\FetchStore.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // // custom hook useFetch to fetch the data from the API.\n// const useFetch = url => {\n//     const [data, setData] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     async function fetchData() {\n//         const response = await fetch(url);\n//         const json = await response.json();\n//         setData(json);\n//         setLoading(false)\n//     }\n//     // Because useEffect hook runs on every time when a component is updated but I only need to fetch the data when a component initially Mounts to the dom, to stop this behavior in useEffect I passed the second argument an empty array []\n//     useEffect(() => {\n//         fetchData()\n//         console.log(data);\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//     },[]);\n//     return { loading, data };\n// };\n// const FetchStore = ()=> {\n//     const { loading, data } = useFetch(\"http://localhost:5001/stores\");\n//     return (\n//         <div>\n//             {loading ? <div> Loading.........</div> :\n//                 <ul>\n//                     <li>{data.id}</li>\n//                     <li>{data.storename}</li>\n//                 </ul>\n//             }\n//         </div>\n//     )\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FetchStore() {\n  _s();\n\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetch(\"/stores\").then(res => res.json()).then(data => setData(data));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fetchdata\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"fetchdata\",\n      children: !data ? \"Loading.....\" : data.storename\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FetchStore, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\n_c = FetchStore;\nexport default FetchStore;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchStore\");","map":{"version":3,"sources":["C:/DATA/redux-counter/frontEnd/src/features/FetchStore.js"],"names":["React","useState","useEffect","FetchStore","data","setData","fetch","then","res","json","storename"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAGA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,IAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,KAAK,CAAC,SAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESH,IAAD,IAAUC,OAAO,CAACD,IAAD,CAFzB;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BAEI;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA,gBAA0B,CAACA,IAAD,GAAQ,cAAR,GAAyBA,IAAI,CAACM;AAAxD;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAhBQP,U;;KAAAA,U;AAmBT,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n\r\n// // custom hook useFetch to fetch the data from the API.\r\n// const useFetch = url => {\r\n//     const [data, setData] = useState(null);\r\n//     const [loading, setLoading] = useState(true);\r\n\r\n//     async function fetchData() {\r\n//         const response = await fetch(url);\r\n//         const json = await response.json();\r\n//         setData(json);\r\n//         setLoading(false)\r\n//     }\r\n//     // Because useEffect hook runs on every time when a component is updated but I only need to fetch the data when a component initially Mounts to the dom, to stop this behavior in useEffect I passed the second argument an empty array []\r\n//     useEffect(() => {\r\n//         fetchData()\r\n//         console.log(data);\r\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n//     },[]);\r\n\r\n//     return { loading, data };\r\n// };\r\n\r\n// const FetchStore = ()=> {\r\n\r\n//     const { loading, data } = useFetch(\"http://localhost:5001/stores\");\r\n\r\n//     return (\r\n//         <div>\r\n//             {loading ? <div> Loading.........</div> :\r\n//                 <ul>\r\n//                     <li>{data.id}</li>\r\n//                     <li>{data.storename}</li>\r\n//                 </ul>\r\n//             }\r\n//         </div>\r\n//     )\r\n// };\r\n\r\n\r\nfunction FetchStore() {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/stores\")\r\n      .then((res) => res.json())\r\n      .then((data) => setData(data));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"fetchdata\">\r\n        \r\n        <p className=\"fetchdata\">{!data ? \"Loading.....\" : data.storename}</p>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default FetchStore;"]},"metadata":{},"sourceType":"module"}